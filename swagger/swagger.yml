swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /categories/:
    get:
      tags:
      - categories
      description: |-
        get Categories
        <br>
      operationId: CategoriesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: ""
    post:
      tags:
      - categories
      description: |-
        create Categories
        <br>
      operationId: CategoriesController.Post
      parameters:
      - in: formData
        name: Image
        description: Category Image
        required: true
        type: file
      - in: formData
        name: CategoryName
        description: Category name
        required: true
        type: string
      - in: formData
        name: Icon
        description: Category icon
        required: true
        type: string
      responses:
        "200":
          description: '{int} models.CategoryResponseDTO'
        "403":
          description: body is empty
  /categories/{id}:
    get:
      tags:
      - categories
      description: |-
        get Categories by id
        <br>
      operationId: CategoriesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: :id is empty
    put:
      tags:
      - categories
      description: |-
        update the Categories
        <br>
      operationId: CategoriesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Categories content
        required: true
        schema:
          $ref: '#/definitions/models.Categories'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: :id is not int
    delete:
      tags:
      - categories
      description: |-
        delete the Categories
        <br>
      operationId: CategoriesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /categories/name/{name}:
    get:
      tags:
      - categories
      description: |-
        get Categories by name
        <br>
      operationId: CategoriesController.Get Category By Name
      parameters:
      - in: path
        name: name
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: :name is empty
  /features/:
    get:
      tags:
      - features
      description: |-
        get Features
        <br>
      operationId: FeaturesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Features'
        "403":
          description: ""
    post:
      tags:
      - features
      description: |-
        create Features
        <br>
      operationId: FeaturesController.Post
      parameters:
      - in: body
        name: body
        description: body for Features content
        required: true
        schema:
          $ref: '#/definitions/models.Features'
      responses:
        "201":
          description: '{int} models.Features'
        "403":
          description: body is empty
  /features/{id}:
    get:
      tags:
      - features
      description: |-
        get Features by id
        <br>
      operationId: FeaturesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Features'
        "403":
          description: :id is empty
    put:
      tags:
      - features
      description: |-
        update the Features
        <br>
      operationId: FeaturesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Features content
        required: true
        schema:
          $ref: '#/definitions/models.Features'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Features'
        "403":
          description: :id is not int
    delete:
      tags:
      - features
      description: |-
        delete the Features
        <br>
      operationId: FeaturesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /features/change-visibility/{id}:
    put:
      tags:
      - features
      description: |-
        update the Features
        <br>
      operationId: FeaturesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Features content
        required: true
        schema:
          $ref: '#/definitions/requests.VisibilityRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Features'
        "403":
          description: :id is not int
  /features/items:
    get:
      tags:
      - features
      description: |-
        get Features
        <br>
      operationId: FeaturesController.Get All Features and their items
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.FeaturesResponseFDTO'
        "403":
          description: is empty
  /features/name:
    post:
      tags:
      - features
      description: |-
        get Features by id
        <br>
      operationId: FeaturesController.Get One
      parameters:
      - in: body
        name: body
        description: body for Features content
        required: true
        schema:
          $ref: '#/definitions/requests.StringRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Features'
        "403":
          description: :id is empty
  /item-features/:
    get:
      tags:
      - item-features
      description: |-
        get Item_features
        <br>
      operationId: Item_featuresController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_features'
        "403":
          description: ""
    post:
      tags:
      - item-features
      description: |-
        create Item_features
        <br>
      operationId: Item_featuresController.Post
      parameters:
      - in: body
        name: body
        description: body for Item_features content
        required: true
        schema:
          $ref: '#/definitions/models.ItemFeatureRequestDTO'
      responses:
        "200":
          description: '{int} models.ItemFeatureResponseDTO'
        "403":
          description: body is empty
  /item-features/{id}:
    get:
      tags:
      - item-features
      description: |-
        get Item_features by id
        <br>
      operationId: Item_featuresController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_features'
        "403":
          description: :id is empty
    put:
      tags:
      - item-features
      description: |-
        update the Item_features
        <br>
      operationId: Item_featuresController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Item_features content
        required: true
        schema:
          $ref: '#/definitions/models.Item_features'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_features'
        "403":
          description: :id is not int
    delete:
      tags:
      - item-features
      description: |-
        delete the Item_features
        <br>
      operationId: Item_featuresController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /item-features/features/{id}:
    get:
      tags:
      - item-features
      description: |-
        get Item_features by Item id
        <br>
      operationId: Item_featuresController.Get Item Features
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemFeaturesResponseDTO'
        "403":
          description: :id is empty
  /item-features/features/item/{id}:
    get:
      tags:
      - item-features
      description: |-
        get Item_features by Item id
        <br>
      operationId: Item_featuresController.Get Item Features
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemFeaturesResponseDTO'
        "403":
          description: :id is empty
  /item-images/:
    get:
      tags:
      - item-images
      description: |-
        get Item_images
        <br>
      operationId: Item_imagesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_images'
        "403":
          description: ""
    post:
      tags:
      - item-images
      description: |-
        create Item_images
        <br>
      operationId: Item_imagesController.Post
      parameters:
      - in: body
        name: body
        description: body for Item_images content
        required: true
        schema:
          $ref: '#/definitions/models.Item_images'
      responses:
        "201":
          description: '{int} models.Item_images'
        "403":
          description: body is empty
  /item-images/{id}:
    get:
      tags:
      - item-images
      description: |-
        get Item_images by id
        <br>
      operationId: Item_imagesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_images'
        "403":
          description: :id is empty
    put:
      tags:
      - item-images
      description: |-
        update the Item_images
        <br>
      operationId: Item_imagesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Item_images content
        required: true
        schema:
          $ref: '#/definitions/models.Item_images'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_images'
        "403":
          description: :id is not int
    delete:
      tags:
      - item-images
      description: |-
        delete the Item_images
        <br>
      operationId: Item_imagesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /item-images/upload-pictures:
    post:
      tags:
      - item-images
      description: |-
        Upload a picture to items
        <br>
      operationId: Item_imagesController.Upload Picture
      parameters:
      - in: formData
        name: Image
        description: Item Image
        required: true
        type: file
      responses:
        "200":
          description: '{int} responses.StringResponseFDTO'
        "403":
          description: body is empty
  /item-purposes/:
    get:
      tags:
      - item-purposes
      description: |-
        get Item_purposes
        <br>
      operationId: Item_purposesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_purposes'
        "403":
          description: ""
    post:
      tags:
      - item-purposes
      description: |-
        create Item_purposes
        <br>
      operationId: Item_purposesController.Post
      parameters:
      - in: body
        name: body
        description: body for Item_purposes content
        required: true
        schema:
          $ref: '#/definitions/models.ItemPurposeRequestDTO'
      responses:
        "201":
          description: '{int} models.ItemPurposeResponseDTO'
        "403":
          description: body is empty
  /item-purposes/{id}:
    get:
      tags:
      - item-purposes
      description: |-
        get Item_purposes by id
        <br>
      operationId: Item_purposesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_purposes'
        "403":
          description: :id is empty
    put:
      tags:
      - item-purposes
      description: |-
        update the Item_purposes
        <br>
      operationId: Item_purposesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Item_purposes content
        required: true
        schema:
          $ref: '#/definitions/models.Item_purposes'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_purposes'
        "403":
          description: :id is not int
    delete:
      tags:
      - item-purposes
      description: |-
        delete the Item_purposes
        <br>
      operationId: Item_purposesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /item-purposes/purposes/{id}:
    get:
      tags:
      - item-purposes
      description: |-
        get Item_purposes by Purpose id
        <br>
      operationId: Item_purposesController.Get Item Purposes
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemPurposesResponseDTO'
        "403":
          description: :id is empty
  /item-purposes/purposes/item/{id}:
    get:
      tags:
      - item-purposes
      description: |-
        get Item_purposes by Item id
        <br>
      operationId: Item_purposesController.Get Item Purposes By Item
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemPurposesResponseDTO'
        "403":
          description: :id is empty
  /item-reviews/:
    get:
      tags:
      - item-reviews
      description: |-
        get Item_reviews
        <br>
      operationId: Item_reviewsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_reviews'
        "403":
          description: ""
    post:
      tags:
      - item-reviews
      description: |-
        create Item_reviews
        <br>
      operationId: Item_reviewsController.Post
      parameters:
      - in: body
        name: body
        description: body for Item_reviews content
        required: true
        schema:
          $ref: '#/definitions/requests.AddReviewRequest'
      responses:
        "201":
          description: '{int} responses.ItemReviewResponseDTO'
        "403":
          description: body is empty
  /item-reviews/{id}:
    get:
      tags:
      - item-reviews
      description: |-
        get Item_reviews by id
        <br>
      operationId: Item_reviewsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_reviews'
        "403":
          description: :id is empty
    put:
      tags:
      - item-reviews
      description: |-
        update the Item_reviews
        <br>
      operationId: Item_reviewsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Item_reviews content
        required: true
        schema:
          $ref: '#/definitions/models.Item_reviews'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Item_reviews'
        "403":
          description: :id is not int
    delete:
      tags:
      - item-reviews
      description: |-
        delete the Item_reviews
        <br>
      operationId: Item_reviewsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /items/:
    get:
      tags:
      - items
      description: |-
        get Items
        <br>
      operationId: ItemsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Items'
        "403":
          description: ""
    post:
      tags:
      - items
      description: |-
        create Items
        <br>
      operationId: ItemsController.Post
      parameters:
      - in: body
        name: body
        description: body for Items content
        required: true
        schema:
          $ref: '#/definitions/requests.AddItemRequest'
      responses:
        "201":
          description: '{int} responses.ItemsResponseDTO'
        "403":
          description: body is empty
  /items/{id}:
    get:
      tags:
      - items
      description: |-
        get Items by id
        <br>
      operationId: ItemsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Items'
        "403":
          description: :id is empty
    put:
      tags:
      - items
      description: |-
        update the Items
        <br>
      operationId: ItemsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Items content
        required: true
        schema:
          $ref: '#/definitions/models.ItemsDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Items'
        "403":
          description: :id is not int
    delete:
      tags:
      - items
      description: |-
        delete the Items
        <br>
      operationId: ItemsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /items/branch/{branch_id}:
    get:
      tags:
      - items
      description: |-
        get Items
        <br>
      operationId: ItemsController.Get All Items by branch
      parameters:
      - in: path
        name: branch_id
        description: The id you want to update
        required: true
        type: string
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Items'
        "403":
          description: ""
  /items/categories/{id}:
    get:
      tags:
      - items
      description: |-
        get Item_features by Item id
        <br>
      operationId: ItemsController.Get Item Features
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemsResponseDTO2'
        "403":
          description: :id is empty
  /items/check-item-quantity/{item_id}:
    get:
      tags:
      - items
      description: |-
        check item quantity
        <br>
      operationId: ItemsController.Check Item Quantity
      parameters:
      - in: path
        name: item_id
        description: The id you want to update
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseFDTO'
        "403":
          description: wrong request
  /items/count/:
    get:
      tags:
      - items
      description: |-
        get Item_quantity by Item id
        <br>
      operationId: ItemsController.Get Item Quantity
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: :id is empty
  /items/count/type:
    post:
      tags:
      - items
      description: |-
        get Item_quantity by Item id
        <br>
      operationId: ItemsController.Get Item Quantity
      parameters:
      - in: body
        name: body
        description: body for Items content
        required: true
        schema:
          $ref: '#/definitions/requests.GetItemCount'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: :id is empty
  /items/count/type/{name}:
    get:
      tags:
      - items
      description: |-
        get Item_quantity by Item id
        <br>
      operationId: ItemsController.Get Item Quantity
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: :id is empty
  /items/features/feature/{id}:
    get:
      tags:
      - items
      description: |-
        get Item_features by Item id
        <br>
      operationId: ItemsController.Get Item Features
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemsResponseDTO2'
        "403":
          description: :id is empty
  /items/get-item-stats/{branch_id}:
    get:
      tags:
      - items
      description: |-
        get item stats
        <br>
      operationId: ItemsController.Get Item Stats
      parameters:
      - in: path
        name: branch_id
        description: The id you want to update
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.ItemsStatsResponseDTO'
        "403":
          description: wrong request
  /items/purposes/purpose/{id}:
    get:
      tags:
      - items
      description: |-
        get Item_purposes by Item id
        <br>
      operationId: ItemsController.Get Item Purposes
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemsResponseDTO2'
        "403":
          description: :id is empty
  /items/quantity/{id}:
    get:
      tags:
      - items
      description: |-
        get Item_quantity by Item id
        <br>
      operationId: ItemsController.Get Item Quantity
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ItemQuantityResponseDTO'
        "403":
          description: :id is empty
  /items/update-item-image/{id}:
    put:
      tags:
      - items
      description: |-
        update the Item's image
        <br>
      operationId: ItemsController.Update Item Image
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Items content
        required: true
        schema:
          $ref: '#/definitions/requests.ImageUpdateRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Items'
        "403":
          description: :id is not int
  /purposes/:
    get:
      tags:
      - purposes
      description: |-
        get Purposes
        <br>
      operationId: PurposesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Purposes'
        "403":
          description: ""
    post:
      tags:
      - purposes
      description: |-
        create Purposes
        <br>
      operationId: PurposesController.Post
      parameters:
      - in: body
        name: body
        description: body for Purposes content
        required: true
        schema:
          $ref: '#/definitions/models.Purposes'
      responses:
        "201":
          description: '{int} models.Purposes'
        "403":
          description: body is empty
  /purposes/{id}:
    get:
      tags:
      - purposes
      description: |-
        get Purposes by id
        <br>
      operationId: PurposesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Purposes'
        "403":
          description: :id is empty
    put:
      tags:
      - purposes
      description: |-
        update the Purposes
        <br>
      operationId: PurposesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Purposes content
        required: true
        schema:
          $ref: '#/definitions/models.Purposes'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Purposes'
        "403":
          description: :id is not int
    delete:
      tags:
      - purposes
      description: |-
        delete the Purposes
        <br>
      operationId: PurposesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /purposes/change-visibility/{id}:
    put:
      tags:
      - purposes
      description: |-
        update the Purposes
        <br>
      operationId: PurposesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Purposes content
        required: true
        schema:
          $ref: '#/definitions/requests.VisibilityRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Purposes'
        "403":
          description: :id is not int
  /purposes/items:
    get:
      tags:
      - purposes
      description: |-
        get Features
        <br>
      operationId: PurposesController.Get All Purposes and their items
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.PurposesResponseFDTO'
        "403":
          description: is empty
definitions:
  511.<nil>.Item_features:
    title: Item_features
    type: object
  1231.<nil>.0x140007e4738:
    title: "0x140007e4738"
    type: object
  1278.<nil>.0x140007e4768:
    title: "0x140007e4768"
    type: object
  1388.<nil>.Item_purposes:
    title: Item_purposes
    type: object
  66928.<nil>.Items:
    title: Items
    type: object
  models.Branches:
    title: Branches
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Branch:
        type: string
      BranchId:
        type: integer
        format: int64
      Country:
        $ref: '#/definitions/models.Countries'
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
  models.Categories:
    title: Categories
    type: object
    properties:
      CategoryId:
        type: integer
        format: int64
      CategoryName:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Icon:
        type: string
      ImagePath:
        type: string
      ModifiedBy:
        type: integer
        format: int64
  models.Countries:
    title: Countries
    type: object
    properties:
      Country:
        type: string
      CountryCode:
        type: string
      CountryId:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      DefaultCurrency:
        type: integer
        format: int64
      Description:
        type: string
      ModifiedBy:
        type: integer
        format: int64
  models.Currencies:
    title: Currencies
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      Currency:
        type: string
      CurrencyId:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Symbol:
        type: string
  models.Features:
    title: Features
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Description:
        type: string
      FeatureId:
        type: integer
        format: int64
      FeatureName:
        type: string
      ImagePath:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Visible:
        type: boolean
  models.FeaturesResponseFDTO:
    title: FeaturesResponseFDTO
    type: object
  models.Item_features:
    title: Item_features
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Feature:
        $ref: '#/definitions/models.Features'
      Item:
        $ref: '#/definitions/models.Items'
      ItemFeatureId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
  models.Item_images:
    title: Item_images
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ImagePath:
        type: string
      IsDefault:
        type: integer
        format: int64
      ItemId:
        type: integer
        format: int64
      ItemImageId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
  models.Item_prices:
    title: Item_prices
    type: object
    properties:
      Active:
        type: integer
        format: int64
      AltItemPrice:
        type: number
        format: float
      CreatedBy:
        type: integer
        format: int64
      Currency:
        $ref: '#/definitions/models.Currencies'
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Discount:
        type: string
      Discount_type:
        type: string
      ExtraCharges:
        type: number
        format: float
      ItemPrice:
        type: number
        format: float
      ItemPriceId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      ShowAltPrice:
        type: boolean
  models.Item_purposes:
    title: Item_purposes
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Item:
        $ref: '#/definitions/models.Items'
      ItemPurposeId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      Purpose:
        $ref: '#/definitions/models.Purposes'
  models.Item_quantity:
    title: Item_quantity
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Item:
        $ref: '#/definitions/models.Items'
      ItemQuantityId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      Quantity:
        type: integer
        format: int64
      QuantityAlert:
        type: integer
        format: int64
  models.Item_reviews:
    title: Item_reviews
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ItemReviewId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      Rating:
        type: number
        format: double
      Review:
        type: string
      ReviewBy:
        $ref: '#/definitions/models.Users'
  models.ItemFeatureRequestDTO:
    title: ItemFeatureRequestDTO
    type: object
    properties:
      FeatureId:
        type: string
      ItemId:
        type: string
  models.ItemFeaturesResponseDTO:
    title: ItemFeaturesResponseDTO
    type: object
    properties:
      ItemFeatures:
        $ref: '#/definitions/511.<nil>.Item_features'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  models.ItemPurposeRequestDTO:
    title: ItemPurposeRequestDTO
    type: object
    properties:
      ItemId:
        type: string
      PurposeId:
        type: string
  models.ItemPurposesResponseDTO:
    title: ItemPurposesResponseDTO
    type: object
    properties:
      ItemPurposes:
        $ref: '#/definitions/1388.<nil>.Item_purposes'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  models.ItemQuantityResponseDTO:
    title: ItemQuantityResponseDTO
    type: object
    properties:
      Quantity:
        $ref: '#/definitions/models.Item_quantity'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  models.Items:
    title: Items
    type: object
    properties:
      Active:
        type: integer
        format: int64
      AvailableColors:
        type: string
      AvailableSizes:
        type: string
      Branch:
        $ref: '#/definitions/models.Branches'
      Category:
        $ref: '#/definitions/models.Categories'
      Country:
        $ref: '#/definitions/models.Countries'
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Description:
        type: string
      ImagePath:
        type: string
      ItemId:
        type: integer
        format: int64
      ItemName:
        type: string
      ItemPrice:
        $ref: '#/definitions/models.Item_prices'
      Material:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Quantity:
        type: integer
        format: int64
      Weight:
        type: string
  models.ItemsDTO:
    title: ItemsDTO
    type: object
    properties:
      AltPrice:
        type: number
        format: float
      AvailableColors:
        type: array
        items:
          type: string
      AvailableSizes:
        type: array
        items:
          type: string
      Branch:
        type: integer
        format: int64
      Category:
        type: integer
        format: int64
      Country:
        type: string
      CreatedBy:
        type: integer
        format: int64
      Description:
        type: string
      ItemName:
        type: string
      ItemPrice:
        type: number
        format: float
      Quantity:
        type: integer
        format: int64
      QuantityAlert:
        type: integer
        format: int64
  models.ItemsResponseDTO2:
    title: ItemsResponseDTO2
    type: object
    properties:
      Items:
        $ref: '#/definitions/66928.<nil>.Items'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.Purposes:
    title: Purposes
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Description:
        type: string
      ImagePath:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Purpose:
        type: string
      PurposeId:
        type: integer
        format: int64
      Visible:
        type: boolean
  models.PurposesResponseFDTO:
    title: PurposesResponseFDTO
    type: object
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
  models.Users:
    title: Users
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Address:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Dob:
        type: string
        format: datetime
      Email:
        type: string
      FullName:
        type: string
      Gender:
        type: string
      IdNumber:
        type: string
      IdType:
        type: string
      IsVerified:
        type: boolean
      MaritalStatus:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Password:
        type: string
      PhoneNumber:
        type: string
      UserId:
        type: integer
        format: int64
      UserType:
        type: integer
        format: int64
      Username:
        type: string
  requests.AddItemRequest:
    title: AddItemRequest
    type: object
    properties:
      AltItemPrice:
        type: number
        format: float
      AvailableColors:
        type: array
        items:
          type: string
      AvailableSizes:
        type: array
        items:
          type: string
      Branch:
        type: integer
        format: int64
      Category:
        type: integer
        format: int64
      Country:
        type: string
      CreatedBy:
        type: integer
        format: int64
      Description:
        type: string
      ExtraCharges:
        type: number
        format: float
      ItemName:
        type: string
      ItemPrice:
        type: number
        format: float
      Quantity:
        type: integer
        format: int64
      QuantityAlert:
        type: integer
        format: int64
      Weight:
        type: string
  requests.AddReviewRequest:
    title: AddReviewRequest
    type: object
    properties:
      Rating:
        type: number
        format: double
      Review:
        type: string
      ReviewBy:
        type: integer
        format: int64
  requests.GetItemCount:
    title: GetItemCount
    type: object
    properties:
      Branch:
        type: string
      Category:
        type: string
  requests.ImageUpdateRequest:
    title: ImageUpdateRequest
    type: object
    properties:
      ImagePath:
        type: string
  requests.StringRequestDTO:
    title: StringRequestDTO
    type: object
    properties:
      Value:
        type: string
  requests.VisibilityRequestDTO:
    title: VisibilityRequestDTO
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Visibility:
        type: boolean
  responses.ItemsStatsResponseDTO:
    title: ItemsStatsResponseDTO
    type: object
    properties:
      Stats:
        $ref: '#/definitions/responses.StatsDTO'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  responses.StatsDTO:
    title: StatsDTO
    type: object
    properties:
      BranchStats:
        $ref: '#/definitions/1231.<nil>.0x140007e4738'
      CategoryStats:
        $ref: '#/definitions/1278.<nil>.0x140007e4768'
  responses.StringResponseDTO:
    title: StringResponseDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      Value:
        type: string
  responses.StringResponseFDTO:
    title: StringResponseFDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      Value:
        type: string
tags:
- name: categories
  description: |
    CategoriesController operations for Categories
- name: features
  description: |
    FeaturesController operations for Features
- name: purposes
  description: |
    PurposesController operations for Purposes
- name: items
  description: |
    ItemsController operations for Items
- name: item-images
  description: |
    Item_imagesController operations for Item_images
- name: item-purposes
  description: |
    Item_purposesController operations for Item_purposes
- name: item-features
  description: |
    Item_featuresController operations for Item_features
- name: item-reviews
  description: |
    Item_reviewsController operations for Item_reviews
